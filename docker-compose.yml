version: '3.8'

services:
  # PostgreSQL Database (optional - for conversation history)
  db:
    image: postgres:15-alpine
    container_name: grok-chat-db
    environment:
      POSTGRES_DB: ${DB_NAME:-grok_chat}
      POSTGRES_USER: ${DB_USER:-grok_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-grok_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grok-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: grok-chat-backend
    environment:
      XAI_API_KEY: ${XAI_API_KEY}
      PORT: 3000
      NODE_ENV: production
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost}
      # Database connection (optional)
      DATABASE_URL: postgresql://${DB_USER:-grok_user}:${DB_PASSWORD:-change_me_in_production}@db:5432/${DB_NAME:-grok_chat}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - grok-network

  # Frontend (Angular)
  frontend:
    build:
      context: ./grok-chat
      dockerfile: Dockerfile
    container_name: grok-chat-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - grok-network

volumes:
  postgres_data:

networks:
  grok-network:
    driver: bridge
